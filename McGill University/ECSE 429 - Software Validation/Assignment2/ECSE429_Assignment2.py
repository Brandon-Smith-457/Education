#
# CODE WRITTEN IN PYTHON 3.7 ON WINDOWS.  I see no reason why it shouldn't run on Linux or Mac but alas I must be completely safe
#

import os

def findCharacterIndex(s, n):
    characterIndex = 0
    for i in range(n - 1):
        while s[characterIndex] != "\n":
            characterIndex = characterIndex + 1
        characterIndex = characterIndex + 1
    return characterIndex


print("DISCLAIMER1: This secondary input phase will not exist in the final Project.  This is just so that Assignment 1 and Assignment 2 may be run independently of one another.\n")
print("DISCLAIMER2: This assignment is written under the assumption that the mutant fault list is in the EXACT format of that generated by MY assignment 1\n")

while (True):
    try:
        inputFilePath = input("Please input the file path of the original code that generated the mutant list (relative to the current working directory): ")
        k = inputFilePath.rfind(".")
        inputFileExtension = inputFilePath[k:]
        inputFileName = inputFilePath[:k]
        mutantListFilePath = inputFileName + "_MutationLib.txt"
        
        input = open(inputFilePath, "r")
        break
    except Exception as e:
        print("Not a valid file or file path")

originalFileString = input.read()

try:
    input = open(mutantListFilePath, "r")
except Exception as e:
    print(mutantListFilePath, "does not correspond to a valid file.  Please ensure you have run Assignment 1 first.")
    exit()

outputDirectory = "/Mutated_Source_Codes/"
try:
    cwd = os.getcwd()
    os.makedirs(os.path.dirname(cwd + outputDirectory), exist_ok=True)
except Exception as e:
    print("Could not create directory", outputDirectory)
    exit()

j = 0
lineNumber = 0
originalLine = ""
mutantType = ""
lineToInsert = ""
numberOfGeneratedFiles = 0
newFileString = ""
for line in input:
    if line == "Total mutation counts:\n":
        for i in range(4):
            numberOfGeneratedFiles = numberOfGeneratedFiles + int(input.readline().split(" : ")[1].split("\n")[0])
        break
    
    lineNumber = int(line.split("\n")[0])

    line = input.readline()
    originalLine = line

    line = input.readline()
    mutantType = line.split("\n")[0]

    line = input.readline()
    lineToInsert = line
    
    line = input.readline()

    characterIndex = findCharacterIndex(originalFileString, lineNumber)
    newFileString = originalFileString[:characterIndex] + lineToInsert + originalFileString[characterIndex + len(originalLine):]

    fileNameDict = {
        "+" : "Plus",
        "-" : "Minus",
        "*" : "Multiply",
        "/" : "Divide"
    }
    outputName = outputDirectory[1:] + inputFileName + "_Mutant_" + fileNameDict[mutantType] + "_LineNumber_" + str(lineNumber) + "_MutationNumber_" + str(j) + inputFileExtension
    j = j + 1

    try:
        output = open(outputName, "w+")
        print("Writing to file:", outputName)
        output.write(newFileString)
    except Exception as e:
        print("Failed to create/write to file:", outputName)
    output.close()

input.close()
print(numberOfGeneratedFiles, "mutant files created!")
